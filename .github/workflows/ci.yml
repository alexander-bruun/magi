name: Build Docker Images & binaries and Release
permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - main

env:
  REGISTRY_IMAGE: alexbruun/magi

jobs:
  semantic:
    name: Determine the next release version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine_version.outputs.version }}

    steps:
      - name: Install git
        run: sudo apt-get update && sudo apt-get install -y git

      - name: Checkout
        uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Determine the next release version
        id: determine_version
        uses: cycjimmy/semantic-release-action@v5
        with:
          dry_run: true
          extra_plugins: |
            @semantic-release/git
            @semantic-release/exec
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  build:
    name: Build partial (${{ matrix.platform }})
    runs-on: ubuntu-latest
    needs:
      - semantic
    if: needs.semantic.outputs.version != ''  # Run only if a new version is available
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge and push image
    runs-on: ubuntu-latest
    needs:
      - semantic
      - build
    if: needs.semantic.outputs.version != ''  # Run only if a new version is available

    steps:
      - name: Download digests
        uses: actions/download-artifact@v6
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ needs.semantic.outputs.version }}
            type=raw,value=latest
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ needs.semantic.outputs.version }}

  create-release:
    name: Create Release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - semantic
      - build
      - merge
    if: needs.semantic.outputs.version != ''  # Run only if a new version is available

    steps:
      - name: Install git
        run: sudo apt-get update && sudo apt-get install -y git gh make zip

      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up GoLang
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Build binaries
        run: make go-build PLATFORM="all" VERSION="v${{ needs.semantic.outputs.version }}"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v5
        with:
          dry_run: false
          extra_plugins: |
            @semantic-release/git
            @semantic-release/exec
        env:
          GIT_AUTHOR_NAME: ${{ steps.gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.gpg.outputs.email }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Release failed
        if: steps.semantic.outputs.new_release_published == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            core.setFailed('Release failed')

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload v${{ needs.semantic.outputs.version }} ./builds/* --clobber
