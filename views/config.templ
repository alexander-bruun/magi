package views

import (
    "github.com/alexander-bruun/magi/models"
    "fmt"
)

templ Config() {
    @PageTitle("Configuration")
    @Breadcrumb([]BreadcrumbItem{{ Label: "Home", Href: "/" }, { Label: "Configuration", Href: "/admin/config" }})
    <div class="uk-container mt-2">
        <h3 class="uk-heading-line text-xl font-semibold mb-4 uk-h3 uk-text-center"><span>Configuration</span></h3>
        <div class="flex place-content-center">
            <div class="w-2/4">
                <div class="uk-card p-4">
                    {{ cfg, _ := models.GetAppConfig() }}
                    <form hx-post="/admin/config" hx-target="#content" hx-trigger="submit" class="space-y-6">
                        <div>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" name="allow_registration" checked?={ cfg.AllowRegistration } class="uk-checkbox" />
                                <span>Allow new user registrations</span>
                            </label>
                            <p class="text-xs text-muted mt-1">Disable to prevent any new users from signing up.</p>
                        </div>
                        <div>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" name="require_login_for_content" checked?={ cfg.RequireLoginForContent } class="uk-checkbox" />
                                <span>Require login to view or read manga</span>
                            </label>
                            <p class="text-xs text-muted mt-1">Enable to require users to be logged in to view manga listings and read chapters.</p>
                        </div>
                        <div>
                            <label class="block mb-1">Max users (0 = unlimited)</label>
                            <input type="number" min="0" class="uk-input" name="max_users" value={ fmt.Sprintf("%d", cfg.MaxUsers) } />
                            {{ userCount, _ := models.CountUsers() }}
                            <p class="text-xs text-muted mt-1">Current users: { fmt.Sprintf("%d", userCount) }</p>
                        </div>
                        <div>
                            <label class="block mb-1">Maximum Content Rating</label>
                            <select name="content_rating_limit" class="uk-select">
                                <option value="0" selected?={ cfg.ContentRatingLimit == 0 }>Safe only</option>
                                <option value="1" selected?={ cfg.ContentRatingLimit == 1 }>Suggestive (includes safe)</option>
                                <option value="2" selected?={ cfg.ContentRatingLimit == 2 }>Erotica (includes safe, suggestive)</option>
                                <option value="3" selected?={ cfg.ContentRatingLimit == 3 }>All content (includes pornographic)</option>
                            </select>
                            <p class="text-xs text-muted mt-1">Control the maximum content rating level users can view. Lower levels are more restrictive.</p>
                        </div>
                        <div class="flex justify-center">
                            <button type="submit" class="uk-btn uk-btn-default">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
