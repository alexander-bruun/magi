// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/alexander-bruun/magi/models"
	"path/filepath"
)

func Better(duplicates []models.MangaDuplicate, currentPage, totalPages, total int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = PageTitle("Better").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Breadcrumb([]BreadcrumbItem{
			{Label: "Home", Href: "/"},
			{Label: "Libraries", Href: "/libraries"},
			{Label: "Better", Href: "/libraries/better"},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"uk-container mt-2\"><div class=\"uk-card p-4\"><h2 class=\"uk-heading-line text-2xl font-bold mb-6 uk-h2 uk-text-center\"><span>Manga Duplicates</span></h2>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(duplicates) == 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"uk-alert-success\" uk-alert><div class=\"uk-flex uk-flex-middle uk-flex-center\"><uk-icon icon=\"BadgeCheck\" size=\"32\" class=\"mr-3\"></uk-icon><p class=\"text-lg uk-margin-remove\">No duplicate mangas found in any library!</p></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"uk-alert-warning mb-4\" uk-alert><div class=\"uk-flex uk-flex-middle\"><uk-icon icon=\"TriangleAlert\" size=\"32\" class=\"mr-3\"></uk-icon><p class=\"uk-margin-remove\">The following mangas have chapters from multiple different folders. This typically indicates duplicate folder structures.</p></div></div><div class=\"uk-overflow-auto\"><table class=\"uk-table uk-table-striped uk-table-hover\"><thead><tr><th>Manga</th><th>Library</th><th>Folder 1</th><th>Folder 2</th><th class=\"uk-text-center\">Actions</th></tr></thead> <tbody>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, dup := range duplicates {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<tr id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var2 string
				templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("duplicate-%d", dup.ID))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 54, Col: 52}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"><td><div class=\"flex items-center\"><uk-icon icon=\"BookOpen\" class=\"mr-2\"></uk-icon> <a href=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 templ.SafeURL
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinURLErrs(templ.SafeURL(fmt.Sprintf("/manga/%s", dup.MangaSlug)))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 58, Col: 75}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" class=\"uk-link-text\"><strong>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(dup.MangaName)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 59, Col: 35}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</strong></a></div></td><td><span class=\"uk-badge\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(dup.LibraryName)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 64, Col: 50}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</span></td><td><code class=\"text-sm\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(filepath.Base(dup.FolderPath1))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 67, Col: 64}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</code></td><td><code class=\"text-sm\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(filepath.Base(dup.FolderPath2))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 70, Col: 64}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</code></td><td class=\"uk-text-center\"><div class=\"uk-flex uk-flex-center uk-flex-middle\" style=\"gap: 8px;\"><button class=\"uk-btn uk-btn-secondary uk-btn-small\" hx-post=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/api/duplicates/%d/dismiss", dup.ID))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 76, Col: 71}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" hx-target=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("#duplicate-%d", dup.ID))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/better.templ`, Line: 77, Col: 60}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" hx-swap=\"outerHTML swap:0.5s\" hx-confirm=\"Are you sure you want to dismiss this duplicate?\"><uk-icon icon=\"X\" class=\"mr-1\"></uk-icon> Dismiss</button> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.ComponentScript{Call: fmt.Sprintf("openDeleteModal(%d)", dup.ID)})
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<button class=\"uk-btn uk-btn-destructive uk-btn-small\" onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 templ.ComponentScript = templ.ComponentScript{Call: fmt.Sprintf("openDeleteModal(%d)", dup.ID)}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var10.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\"><uk-icon icon=\"Trash2\" class=\"mr-1\"></uk-icon> Delete</button></div></td></tr>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</tbody></table></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if totalPages > 1 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<div class=\"flex justify-center items-center py-8\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = UnifiedPagination("/better", "content", false, totalPages, currentPage, "", "").Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "</div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<div class=\"mt-6 text-center\"><a href=\"/libraries\" class=\"uk-btn uk-btn-default\"><uk-icon icon=\"ArrowLeft\" class=\"mr-2\"></uk-icon> Back to Libraries</a></div></div></div><!-- Delete Modal --><div id=\"delete-modal\" uk-modal><div class=\"uk-modal-dialog\"><div class=\"uk-modal-header\" style=\"display: flex; justify-content: space-between; align-items: center;\"><h2 class=\"uk-modal-title uk-margin-remove\">Delete Duplicate Folder</h2><button class=\"uk-modal-close\" type=\"button\" uk-close></button></div><div class=\"uk-modal-body\"><p class=\"uk-text-warning\" style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 24px;\"><uk-icon icon=\"TriangleAlert\"></uk-icon> <span>Select which folder to delete. This action cannot be undone!</span></p><div id=\"modal-content\" class=\"uk-margin-top\"><div class=\"uk-flex uk-flex-center\"><div uk-spinner></div></div></div></div></div></div><script>\n\t\tlet currentDuplicateId = null;\n\n\t\tasync function openDeleteModal(duplicateId) {\n\t\t\tcurrentDuplicateId = duplicateId;\n\t\t\tconst modal = UIkit.modal('#delete-modal');\n\t\t\tmodal.show();\n\t\t\t\n\t\t\t// Load folder information\n\t\t\tconst modalContent = document.getElementById('modal-content');\n\t\t\tmodalContent.innerHTML = '<div class=\"uk-flex uk-flex-center\"><div uk-spinner></div></div>';\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(`/api/duplicates/${duplicateId}/folder-info`);\n\t\t\t\tconst data = await response.json();\n\t\t\t\t\n\t\t\t\tmodalContent.innerHTML = `\n\t\t\t\t\t<div class=\"uk-grid uk-child-width-1-2@s\" uk-grid>\n\t\t\t\t\t\t${createFolderCard(data.folder1, duplicateId, 'Folder 1')}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t${createFolderCard(data.folder2, duplicateId, 'Folder 2')}\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t} catch (error) {\n\t\t\t\tmodalContent.innerHTML = '<div class=\"uk-alert-danger\" uk-alert><p>Failed to load folder information</p></div>';\n\t\t\t}\n\t\t}\n\n\t\tfunction createFolderCard(folder, duplicateId, title) {\n\t\t\tif (!folder.exists) {\n\t\t\t\treturn `\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div class=\"uk-card uk-card-default uk-card-body uk-card-small\">\n\t\t\t\t\t\t\t<h3 class=\"uk-card-title\">${title}</h3>\n\t\t\t\t\t\t\t<p class=\"uk-text-danger\">\n\t\t\t\t\t\t\t\t<uk-icon icon=\"AlertCircle\"></uk-icon>\n\t\t\t\t\t\t\t\tFolder not found\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<code class=\"uk-text-small\">${folder.path}</code>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t}\n\n\t\t\tconst lastModified = new Date(folder.last_modified * 1000).toLocaleString();\n\t\t\t\n\t\t\treturn `\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"uk-card uk-card-default uk-card-body uk-card-small\">\n\t\t\t\t\t\t<h3 class=\"uk-card-title\">${title}</h3>\n\t\t\t\t\t\t<div class=\"uk-margin-small\">\n\t\t\t\t\t\t\t<p class=\"uk-text-bold uk-margin-remove\">${folder.base_name}</p>\n\t\t\t\t\t\t\t<code class=\"uk-text-small uk-text-muted\">${folder.path}</code>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"uk-margin-small\">\n\t\t\t\t\t\t\t<p class=\"uk-text-small uk-margin-remove\" style=\"display: flex; align-items: center; gap: 4px;\">\n\t\t\t\t\t\t\t\t<uk-icon icon=\"File\"></uk-icon>\n\t\t\t\t\t\t\t\t<strong>Files:</strong> ${folder.file_count}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p class=\"uk-text-small uk-margin-remove\" style=\"display: flex; align-items: center; gap: 4px;\">\n\t\t\t\t\t\t\t\t<uk-icon icon=\"Clock\"></uk-icon>\n\t\t\t\t\t\t\t\t<strong>Modified:</strong> ${lastModified}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button \n\t\t\t\t\t\t\tclass=\"uk-btn uk-btn-destructive uk-btn-small uk-width-1-1 uk-margin-small-top\"\n\t\t\t\t\t\t\tonclick=\"confirmDeleteFolder('${folder.path}', ${duplicateId})\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<uk-icon icon=\"Trash2\" class=\"mr-1\"></uk-icon>\n\t\t\t\t\t\t\tDelete This Folder\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\n\t\tfunction confirmDeleteFolder(folderPath, duplicateId) {\n\t\t\tconst folderName = folderPath.split('/').pop();\n\t\t\t\n\t\t\tif (confirm(`Are you absolutely sure you want to DELETE the folder:\\n\\n\"${folderName}\"\\n\\nThis will permanently delete all files in this folder and cannot be undone!`)) {\n\t\t\t\tdeleteFolder(folderPath, duplicateId);\n\t\t\t}\n\t\t}\n\n\t\tasync function deleteFolder(folderPath, duplicateId) {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(`/api/duplicates/${duplicateId}/folder`, {\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({ folder_path: folderPath }),\n\t\t\t\t});\n\n\t\t\t\tif (response.ok) {\n\t\t\t\t\t// Close modal\n\t\t\t\t\tUIkit.modal('#delete-modal').hide();\n\t\t\t\t\t\n\t\t\t\t\t// Remove the duplicate row from the table\n\t\t\t\t\tconst row = document.getElementById(`duplicate-${duplicateId}`);\n\t\t\t\t\tif (row) {\n\t\t\t\t\t\trow.remove();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Show success notification\n\t\t\t\t\tUIkit.notification({\n\t\t\t\t\t\tmessage: 'Folder deleted successfully',\n\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\tpos: 'top-right',\n\t\t\t\t\t\ttimeout: 3000\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\tthrow new Error(error.error || 'Failed to delete folder');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tUIkit.notification({\n\t\t\t\t\tmessage: `Error: ${error.message}`,\n\t\t\t\t\tstatus: 'danger',\n\t\t\t\t\tpos: 'top-right',\n\t\t\t\t\ttimeout: 5000\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
