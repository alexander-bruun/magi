package views

import (
    "fmt"
    "github.com/alexander-bruun/magi/models"
)

// PageTitle sets the document title via the global JS handler
templ PageTitle(title string) {
    @templ.JSFuncCall("titleHandler", title)
}

// BreadcrumbItem defines a single crumb with label and link
type BreadcrumbItem struct {
    Label string
    Href  string
}

// Breadcrumb renders a clickable breadcrumb trail
templ Breadcrumb(items []BreadcrumbItem) {
    <nav aria-label="Breadcrumb">
        <ul class="uk-breadcrumb">
            {{ n := len(items) }}
            for i, it := range items {
                if i < n-1 {
                    <li>
                        <a
                            href={ it.Href }
                            hx-get={ it.Href }
                            hx-target="#content"
                            hx-push-url="true"
                        >{ it.Label }</a>
                    </li>
                } else {
                    <li><span class="uk-text-muted">{ it.Label }</span></li>
                }
            }
        </ul>
    </nav>
}

// Simple, reusable empty state block
templ EmptyState(message string) {
    <div class="flex items-center justify-center mx-auto my-6 p-6 rounded-lg max-w-md">
        <span class="text-xl font-semibold">{ message }</span>
    </div>
}

// Breadcrumbs: Home > Current
templ BreadcrumbHome(current string) {
    <nav aria-label="Breadcrumb">
        <ul class="uk-breadcrumb">
            <li>
                <a href="/" hx-get="/" hx-target="#content" hx-push-url="true">Home</a>
            </li>
            <li><span>{ current }</span></li>
        </ul>
    </nav>
}

// MangaCard renders a single manga card with a link and cover image.
// When fixed=true, uses explicit pixel dimensions. When fixed=false, uses CSS aspect-ratio for fluid scaling.
templ MangaCard(manga models.Manga, width int, height int, truncate bool, fixed bool) {
    <a href={ templ.URL(fmt.Sprintf("/mangas/%s", manga.Slug)) } class="block">
        <div 
            class={ "uk-card uk-card-default uk-card-body p-2 m-2", templ.KV("w-full", !fixed) } 
            if fixed {
                style={ fmt.Sprintf("width:%dpx;", width) }
            }
        >
            <h3 class={ "uk-card-title uk-h3 uk-margin mb-2 uk-text-center", templ.KV("truncate-header", truncate) }>
                { manga.Name }
            </h3>
            <div class="uk-card-media-top flex justify-center items-center">
                @MangaCover(manga.CoverArtURL, manga.Name, width, height, fixed)
            </div>
        </div>
    </a>
}

// MangaCover renders the manga cover image with proper sizing
templ MangaCover(coverURL string, altText string, width int, height int, fixed bool) {
    {{ imageURL := coverURL }}
    if imageURL == "" {
        {{ imageURL = fmt.Sprintf("https://placehold.co/%dx%d?text=N/A", width, height) }}
    }
    
    if fixed {
        <img src={ imageURL } width={ fmt.Sprint(width) } height={ fmt.Sprint(height) } alt={ altText } class="object-cover"/>
    } else {
        <div class="w-full" style={ fmt.Sprintf("aspect-ratio: %d/%d; max-width: 100%%;", width, height) }>
            <img src={ imageURL } alt={ altText } class="w-full h-full object-cover"/>
        </div>
    }
}

// StatCard shows a small statistic with label and numeric value
templ StatCard(label string, value int) {
    <div class="uk-card uk-card-default uk-card-body p-4 m-2 rounded-lg shadow-sm text-center">
        <div class="text-sm text-gray-500">{ label }</div>
        <div class="text-2xl font-bold mt-2">{ fmt.Sprint(value) }</div>
    </div>
}

// ProfileCard renders a user's profile summary used on the account page
templ ProfileCard(user models.User) {
    <div class="uk-card uk-card-default uk-card-body p-6 shadow-md rounded-lg">
        <div class="flex items-center space-x-6">
            <div class="w-32 flex-shrink-0">
                <img src="/assets/img/icon.png" alt="avatar" class="rounded-full w-32 h-32 object-cover" />
            </div>
            <div class="flex-1">
                if user.Role == "admin" {
                    <h3  class="role-admin uk-h3 mb-1"><strong>{ user.Username }</strong></h3>
                } else if user.Role == "moderator" {
                    <h3 class="role-moderator uk-h3 mb-1"><strong>{ user.Username }</strong></h3>
                } else {
                    <h3 class="role-reader uk-h3 mb-1"><strong>{ user.Username }</strong></h3>
                }
                if user.Banned {
                    <p class="role-banned font-semibold">This account is banned</p>
                }
            </div>
        </div>
    </div>
}

// MangaGrid renders a grid of manga cards.
templ MangaGrid(mangas []models.Manga, width int, height int, truncate bool, fixed bool) {
    <!-- Responsive grid: 1 column (xs), 2 (sm), 3 (md), 4 (lg) -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        for _, manga := range mangas {
            <div>
                @MangaCard(manga, width, height, truncate, fixed)
            </div>
        }
    </div>
}

// MangaSlider renders a reusable UIkit slider for mangas.
templ MangaSlider(mangas []models.Manga, width int, height int, truncate bool, fixed bool) {
    <div class="px-1 mt-2" uk-slider>
        <div class="uk-position-relative uk-visible-toggle" tabindex="-1">
            <ul class="uk-slider-items uk-child-width-auto">
                for _, manga := range mangas {
                    <li class="px-1">
                        @MangaCard(manga, width, height, truncate, fixed)
                    </li>
                }
            </ul>
            <a class="uk-position-center-left uk-position-small uk-hidden-hover" href uk-slidenav-previous uk-slider-item="previous"></a>
            <a class="uk-position-center-right uk-position-small uk-hidden-hover" href uk-slidenav-next uk-slider-item="next"></a>
        </div>
        <ul class="uk-slider-nav uk-dotnav uk-flex-center uk-margin place-content-center my-4"></ul>
    </div>
}
